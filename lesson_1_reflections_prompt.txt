terminal shortcuts:
copy and paste for - ctrl + schift + c/v


Download two files into Downloads folder:
#1
enable tab completion:			git-completion.bash
enable special git features:	git-prompt.sh

#2
cd ~
mv Downloads/git-completion.bash git-prompt.sh
mv Downloads/git-prompt.sh git-prompt.sh

#3
mv Downloads/git-completion.bash
mv Downloads/git-prompt.sh

#4 
Download file: bash_profile_course
for linux
if there is a existing '.bashrc' in the home directory
copy the content of the 'bash_profile-course' in the
'.bashrc'file. Close the terminal and open it. 

#5
(subl already working) 
git config --global core.editor "subl -n -w"
git config --global push.default upstream
git config --global merge.conflictstyle diff3


git configuration:
git config --global color.ui auto
git clone https://github.com/xxx
-- set up password caching--
git config --global credential.helper cache
git config --global credential.helper 'cache --timeout=3600'
-- Generating a new SSH key
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
eval "$(ssh-agent -s)"


### commands 
git init (initiate repository)
git log
git status (shows which lines have changed since the last commit)
git add #file
git commit
git commit -m "Commit message" (git commit message without of text editor)
udacity styling guide: https://udacity.github.io/git-styleguide/
git diff #1 #2
git checkout #  
git diff (no arguments) -> will show the changes between the 
                           working directory and staging area
git remote (look for remote)
git remote add origin https://xxx
git remote -v
git push origin master (master=name)
git diff ( difference between working directory and staging area)
git diff --staged (difference between staging area and repository)
git reset -- hard (CAUTION! - irreversible) removes changes between
			 working directory and staging area
git diff commit1 commit2
git checkout master
git branch (prints the branches in the terminal)
git branch filename (creates a new branch with the name 'filename')
git log --graph --online master #branch1 #branch2
git checkout -b new_branch name    is like running following two commands
	git branch new_branch_name
	git checkout new_branch_name
merge check first the branch out you want to point from 
git merge nameOfBranchWichIscheckedOut nameOfSecondBranch
git show commit1 (shows the diff regarding its parent)
git branch -d branchName (delets the label of the branch, the commits stay)
git push myRemote myBranch
git pull origin master
get fetch

Note
git pull origin master = git fetch origin + git merge master origin/master


Reflections on git:

#2 How could having easy access to the entire history of a file make you a more efficient programmer?

A2 Having easy access to the entire history of a file can make you a more efficient programmer, because in some point of the time, even a far away future, you are able to se the evolution of the program and understand why some changes were made.

#3 What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

A3 The cons of not being automatically save are non existent, nevertheless the only pro is that a during OS failure the file are saved in the cloud. The pros of beeing able to choose the time when a software change is being saved through a commitment is that the programer conciously decides when to commit the logical change.

#4 Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separatly?

A4 Git allows saving multiple files in one commit, because these files interralete with each other. They are interdependend need each other (e.g. a specific html file with its css file).

#5 How can you use the commands git log and git diff to view the history of files?

A5 Whith the command git log the whole history of the commits can be seen. To look for a particular error guess the error in a commit through reading the commit message. Having seen the commit where the error could have been introduced look for the change between the commit before the "possible error commit" with the 'git diff #1 #2' command and the respective commit hashes. 

#6 How might using version control make you more confident to make changes that could break something?

A6 Beeing able to revert to the state before a change through a commit can make the programmer more confident to make changes, because the programmer can return to functioning program and loosing the fear of making changes.

#7 How Do You Want to Use Git?
   Now that you have your workspace set up, what do you want to try using Git for?

A7 While learning Java I want to use Git for pushing my code on Github. So that I can look at the code in an unkown feature to look something up. I want to become a better programmer.


2020.10.07

Following Situation:
All commits are comitted on a 'local' repository. Then a repository is initialized in Github. 

In the local repo type following:

git remote (to add en view remote)

git remote add supplyNameHERE (adds the repository on GitHub as a remote)
If only one remote exists in the repository use:
git remote add origin typeHereURL
git remote -v
git push remoteNameHere(origin) branchNameHere(master)
git pull remoteNameHere(origin) branchNameHere(master)

### fork repository (like a clone done on github from one account to another acc.)
(thoughts: branch is locally; clone from github to local repo and from locl to local repo; fork (clone) inside Github)

##pull a combined version of both branches (remotes) (collaboration Problem)

git pull origin master = git fetch origin + git merge master origin/master (the merge is locally)
git log origin/master
git diff origin/master master
!! In case of merge conflict:
change the source coude in the "conflict" file.
git add conflictFileHere.file
git commit (will do a merge commit)

Note: fast forward merge(pull)

Get feedback before push on the master branch
1) push on own fork, but not on the master branch
First step: checkout a new branch and make changes
2) git add & git commit % git push origin newBranchNameHere
3) In Github change the branch. In this case: newBranchNameHere
4) In Github click 'pull request' (Github assums pull into the origin repo/branch)
5) click 'edit' change base fork (own)
6) A thrid party can notify a pull request into (my) master branch
6b) Inline comment in Github for e.g. spelling mistake in a commit
! 7) A not automatically merge should be resolved by the first party before two branches are merged, so (I)you can see how the merge conflict is resolved by the thrid party!
8) 7) means: merge conflicts have to be resolved locally first! Therefore pull the latest state of the origin/master

Note: You could make your changes directly to the master branch in your fork, but when contributing to a public repository, itâ€™s standard practice to make the changes in a non-master branch within the fork. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready.

Note for Windows Users: The story has grown so large that it exceeds Windows' path length limit. If you encounter an error when cloning you can work around it by modifying a configuration setting. Run this command in git bash: git config --system core.longpaths true.


